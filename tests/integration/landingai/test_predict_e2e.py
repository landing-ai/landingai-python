import logging
from pathlib import Path
from typing import Any

import numpy as np
from PIL import Image

from landingai.common import SegmentationPrediction
from landingai.predict import Predictor
from landingai.visualize import overlay_predictions

_API_KEY = "v7b0hdyfj6271xy2o9lmiwkkcbdpvt1"
_API_SECRET = "ao6yjcju7q1e6u0udgwrgknhrx6m4n1o48z81jy6huc059gne047l4fq3u1cgq"
_EXPECTED_SEG_PRED = {
    "label_name": "screw",
    "label_index": 1,
    "score": 0.99487104554061,
    "encoded_mask
    "num_predicted_pixels": 94553,
    "percentage_predicted_pixels": 0.02254319190979004,
    "mask_shape": (2048, 2048),
}
_EXPECTED_VP_PREDS = [
    {
        "label_name": "Green Field",
        "label_index": 3,
        "score": 0.8484444637722576,
        "encoded_mask
        "mask_shape": (1539, 1603),
        "num_predicted_pixels": 39711,
        "percentage_predicted_pixels": 0.016096767877967603,
    },
    {
        "label_name": "Brown Field",
        "label_index": 4,
        "score": 0.9469594520537422,
        "mask_shape": (1539, 1603),
        "num_predicted_pixels": 657373,
        "percentage_predicted_pixels": 0.26646472237524105,
    },
    {
        "label_name": "Trees",
        "label_index": 5,
        "score": 0.9759463515311614,
        "mask_shape": (1539, 1603),
        "num_predicted_pixels": 990878,
        "percentage_predicted_pixels": 0.401650252106086,
    },
    {
        "label_name": "Structure",
        "label_index": 6,
        "score": 0.9677068448643612,
        "mask_shape": (1539, 1603),
        "num_predicted_pixels": 765303,
        "percentage_predicted_pixels": 0.3102139142129949,
    },
]


def test_od_predict():
    Path("tests/output").mkdir(parents=True, exist_ok=True)
    # Endpoint: https://app.landing.ai/app/376/pr/11165/deployment?device=tiger-team-integration-tests
    endpoint_id = "db90b68d-cbfd-4a9c-8dc2-ebc4c3f6e5a4"
    predictor = Predictor(endpoint_id, _API_KEY, _API_SECRET)
    img = np.asarray(Image.open("tests/data/images/cereal1.jpeg"))
    assert img is not None
    # Call LandingLens inference endpoint with Predictor.predict()
    preds = predictor.predict(img)
    assert len(preds) == 3, "Result should not be empty or None"
    expected_scores = [0.9997884631156921, 0.9979170560836792, 0.9976948499679565]
    expected_bboxes = [
        (432, 1035, 651, 1203),
        (1519, 1414, 1993, 1800),
        (948, 1592, 1121, 1797),
    ]
    for i, pred in enumerate(preds):
        assert pred.label_name == "Screw"
        assert pred.label_index == 1
        assert pred.score == expected_scores[i]
        assert pred.bboxes == expected_bboxes[i]
    logging.info(preds)
    img_with_preds = overlay_predictions(predictions=preds, image=img)
    img_with_preds.save("tests/output/test_od.jpg")


def test_seg_predict():
    Path("tests/output").mkdir(parents=True, exist_ok=True)
    # Project: https://app.landing.ai/app/376/pr/26113016987660/deployment?device=tiger-team-integration-tests
    endpoint_id = "72fdc6c2-20f1-4f5e-8df4-62387acec6e4"
    predictor = Predictor(endpoint_id, _API_KEY, _API_SECRET)
    img = Image.open("tests/data/images/cereal1.jpeg")
    assert img is not None
    preds = predictor.predict(img)
    assert len(preds) == 1, "Result should not be empty or None"
    _assert_seg_mask(preds[0], _EXPECTED_SEG_PRED)
    logging.info(preds)
    img_with_masks = overlay_predictions(preds, img)
    img_with_masks.save("tests/output/test_seg.jpg")


def test_vp_predict():
    Path("tests/output").mkdir(parents=True, exist_ok=True)
    # Project: https://app.landing.ai/app/376/pr/26098103179275/deployment?device=tiger-example
    endpoint_id = "63035608-9d24-4342-8042-e4b08e084fde"
    predictor = Predictor(endpoint_id, _API_KEY, _API_SECRET)
    img = np.asarray(Image.open("tests/data/images/farm-coverage.jpg"))
    assert img is not None
    preds = predictor.predict(img)
    assert len(preds) == 4, "Result should not be empty or None"
    for actual, expected in zip(preds, _EXPECTED_VP_PREDS):
        _assert_seg_mask(actual, expected)
    logging.info(preds)
    img_with_masks = overlay_predictions(preds, img)
    img_with_masks.save("tests/output/test_vp.jpg")


def test_class_predict():
    Path("tests/output").mkdir(parents=True, exist_ok=True)
    # Project: https://app.landing.ai/app/376/pr/26119078438913/deployment?device=tiger-team-integration-tests
    endpoint_id = "8fc1bc53-c5c1-4154-8cc1-a08f2e17ba43"
    predictor = Predictor(endpoint_id, _API_KEY, _API_SECRET)
    img = Image.open("tests/data/images/wildfire1.jpeg")
    assert img is not None
    preds = predictor.predict(img)
    assert len(preds) == 1, "Result should not be empty or None"
    assert preds[0].label_name == "HasFire"
    assert preds[0].label_index == 0
    assert preds[0].score == 0.9956502318382263
    logging.info(preds)
    img_with_masks = overlay_predictions(preds, img)
    img_with_masks.save("tests/output/test_class.jpg")


def _assert_seg_mask(pred: SegmentationPrediction, expected: dict[str, Any]):
    assert pred.label_name == expected["label_name"]
    assert pred.label_index == expected["label_index"]
    assert pred.score == expected["score"]
    assert pred.num_predicted_pixels == expected["num_predicted_pixels"]
    assert pred.percentage_predicted_pixels == expected["percentage_predicted_pixels"]
    assert pred.decoded_boolean_mask.shape == expected["mask_shape"]
    assert np.unique(pred.decoded_boolean_mask).tolist() == [0, 1]
    assert np.unique(pred.decoded_index_mask).tolist() == [0, pred.label_index]
    if "encoded_mask" in expected:
        assert pred.encoded_mask == expected["encoded_mask"]
