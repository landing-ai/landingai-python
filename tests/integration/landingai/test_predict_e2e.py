import logging
from pathlib import Path

import numpy as np
import pytest
from PIL import Image, ImageChops

from landingai.predict import OcrPredictor, Predictor
from landingai.visualize import overlay_predictions

_API_KEY = "land_sk_aMemWbpd41yXnQ0tXvZMh59ISgRuKNRKjJEIUHnkiH32NBJAwf"

_EXPECTED_VP_PREDS = [
    {
        "label_name": "Green Field",
        "label_index": 3,
        "score": 0.8327239290916779,
        "encoded_mask
        "mask_shape": (1539, 1603),
        "num_predicted_pixels": 38123,
        "percentage_predicted_pixels": 0.015453075515896324,
    },
    {
        "label_name": "Brown Field",
        "label_index": 4,
        "score": 0.9460220578406374,
        "mask_shape": (1539, 1603),
        "num_predicted_pixels": 674867,
        "percentage_predicted_pixels": 0.2735558774017366,
    },
    {
        "label_name": "Trees",
        "label_index": 5,
        "score": 0.9752337912343116,
        "mask_shape": (1539, 1603),
        "num_predicted_pixels": 977533,
        "percentage_predicted_pixels": 0.39624088524724393,
    },
    {
        "label_name": "Structure",
        "label_index": 6,
        "score": 0.9666909771536597,
        "mask_shape": (1539, 1603),
        "num_predicted_pixels": 761316,
        "percentage_predicted_pixels": 0.3085977923946207,
    },
]


def test_od_predict():
    Path("tests/output").mkdir(parents=True, exist_ok=True)
    # Endpoint: https://app.landing.ai/app/376/pr/11165/deployment?device=tiger-team-integration-tests
    endpoint_id = "db90b68d-cbfd-4a9c-8dc2-ebc4c3f6e5a4"
    predictor = Predictor(endpoint_id, api_key=_API_KEY)
    img = Image.open("tests/data/images/cereal1.jpeg")
    assert img is not None
    # Call LandingLens inference endpoint with Predictor.predict()
    preds = predictor.predict(img)
    assert len(preds) == 3, "Result should not be empty or None"
    expected_scores = [0.9997851252555847, 0.9983770251274109, 0.9983124732971191]
    expected_bboxes = [
        (432, 1036, 652, 1203),
        (948, 1592, 1122, 1798),
        (1518, 1413, 1991, 1799),
    ]
    for i, pred in enumerate(preds):
        assert pred.label_name == "Screw"
        assert pred.label_index == 1
        assert pred.score == expected_scores[i]
        assert pred.bboxes == expected_bboxes[i]
    logging.info(preds)
    img_with_preds = overlay_predictions(predictions=preds, image=img)
    img_with_preds.save("tests/output/test_od.jpg")


def test_seg_predict(seg_mask_validator):
    expected_seg_prediction = {
        "label_name": "screw",
        "label_index": 1,
        "score": 0.9947679092064468,
        "encoded_mask
        "num_predicted_pixels": 93640,
        "percentage_predicted_pixels": 0.022325515747070312,
        "mask_shape": (2048, 2048),
    }
    Path("tests/output").mkdir(parents=True, exist_ok=True)
    # Project: https://app.landing.ai/app/376/pr/26113016987660/deployment?device=tiger-team-integration-tests
    endpoint_id = "72fdc6c2-20f1-4f5e-8df4-62387acec6e4"
    predictor = Predictor(endpoint_id, api_key=_API_KEY)
    img = Image.open("tests/data/images/cereal1.jpeg")
    assert img is not None
    preds = predictor.predict(img)
    assert len(preds) == 1, "Result should not be empty or None"
    seg_mask_validator(preds[0], expected_seg_prediction)
    img_with_masks = overlay_predictions(preds, img)
    img_with_masks.save("tests/output/test_seg.jpg")


def test_vp_predict(seg_mask_validator):
    Path("tests/output").mkdir(parents=True, exist_ok=True)
    # Project: https://app.landing.ai/app/376/pr/26098103179275/deployment?device=tiger-example
    endpoint_id = "63035608-9d24-4342-8042-e4b08e084fde"
    predictor = Predictor(endpoint_id, api_key=_API_KEY)
    img = np.asarray(Image.open("tests/data/images/farm-coverage.jpg"))
    assert img is not None
    preds = predictor.predict(img)
    assert len(preds) == 4, "Result should not be empty or None"
    for actual, expected in zip(preds, _EXPECTED_VP_PREDS):
        seg_mask_validator(actual, expected)
    color_map = {
        "Trees": "green",
        "Structure": "#FFFF00",  # yellow
        "Brown Field": "red",
        "Green Field": "blue",
    }
    options = {"color_map": color_map}
    img_with_masks = overlay_predictions(preds, img, options).resize((512, 512))
    img_with_masks.save("tests/output/test_vp.png")
    expected = Image.open("tests/data/images/expected_vp_masks.png")
    diff = ImageChops.difference(img_with_masks, expected)
    assert diff.getbbox() is None, "Expected and actual images should be the same"


def test_class_predict():
    Path("tests/output").mkdir(parents=True, exist_ok=True)
    # Project: https://app.landing.ai/app/376/pr/26119078438913/deployment?device=tiger-team-integration-tests
    endpoint_id = "8fc1bc53-c5c1-4154-8cc1-a08f2e17ba43"
    predictor = Predictor(endpoint_id, api_key=_API_KEY)
    img = Image.open("tests/data/images/wildfire1.jpeg")
    assert img is not None
    preds = predictor.predict(img)
    assert len(preds) == 1, "Result should not be empty or None"
    assert preds[0].label_name == "HasFire"
    assert preds[0].label_index == 0
    assert preds[0].score == 0.995685338973999
    logging.info(preds)
    img_with_masks = overlay_predictions(preds, img)
    img_with_masks.save("tests/output/test_class.jpg")


# TODO: re-enable below test after OCR endpoint is deployed to prod
@pytest.mark.skip(reason="OCR endpoint is not deployed to prod yet")
def test_ocr_predict():
    Path("tests/output").mkdir(parents=True, exist_ok=True)
    predictor = OcrPredictor(
        # TODO: replace with a prod key after the OCR endpoint is deployed to prod
        api_key="land_sk_6uttU3npa5V0MUgPWb6j33ZuszsGBqVGs4wnoSR91LBwpbjZpG",
    )
    img = Image.open("tests/data/images/ocr_test.png")
    assert img is not None
    # Test multi line
    preds = predictor.predict(img, mode="multi-text")
    logging.info(preds)
    expected_texts = [
        "公司名称",
        "业务方向",
        "Anysphere",
        "AI工具",
        "Atomic Semi",
        "芯片",
        "Cursor",
        "代码编辑",
        "Diagram",
        "设计",
        "Harvey",
        "AI法律顾问",
        "Kick",
        "会计软件",
        "Milo",
        "家长虚拟助理",
        "qqbot.dev",
        "开发者工具",
        "EdgeDB",
        "开源数据库",
        "Mem Labs",
        "笔记应用",
        "Speak",
        "英语学习",
        "Descript",
        "音视频编辑",
        "量子位",
    ]
    preds = sorted(preds, key=lambda x: x.text)
    expected_texts = sorted(expected_texts)
    assert len(preds) == len(expected_texts)
    for pred, expected in zip(preds, expected_texts):
        assert pred.text == expected

    img_with_masks = overlay_predictions(preds, img)
    img_with_masks.save("tests/output/test_ocr_multiline.jpg")
    # Test single line
    preds = predictor.predict(
        img,
        mode="single-text",
        regions_of_interest=[
            [[99, 19], [366, 19], [366, 75], [99, 75]],
            [[599, 842], [814, 845], [814, 894], [599, 892]],
        ],
    )
    logging.info(preds)
    expected = [
        {
            "text": "公司名称",
            "location": [(99, 19), (366, 19), (366, 75), (99, 75)],
            "score": 0.8279303908348083,
        },
        {
            "text": "英语学习",
            "location": [(599, 842), (814, 845), (814, 894), (599, 892)],
            "score": 0.939440906047821,
        },
    ]
    for pred, expected in zip(preds, expected):
        assert pred.text == expected["text"]
        assert pred.location == expected["location"]
        assert pred.score == expected["score"]
    img_with_masks = overlay_predictions(preds, img)
    img_with_masks.save("tests/output/test_ocr_singleline.jpg")
